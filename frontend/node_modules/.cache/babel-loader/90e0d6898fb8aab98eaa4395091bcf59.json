{"ast":null,"code":"import axios from 'axios';\nimport { LOGIN_SUCCESS, LOGIN_FAIL, USER_LOADED_SUCCESS, USER_LOADED_FAIL, AUTHENTICATED_SUCCESS, AUTHENTICATED_FAIL, PASSWORD_RESET_SUCCESS, PASSWORD_RESET_FAIL, PASSWORD_RESET_CONFIRM_SUCCESS, PASSWORD_RESET_CONFIRM_FAIL, SIGNUP_SUCCESS, SIGNUP_FAIL, ACTIVATION_SUCCESS, ACTIVATION_FAIL, LOGOUT } from './types';\nexport const load_user = () => async dispatch => {\n  if (localStorage.getItem('access')) {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `JWT ${localStorage.getItem('access')}`,\n        'Accept': 'application/json'\n      }\n    };\n    try {\n      const res = await axios.get(`${process.env.REACT_APP_API_URL}/auth/users/me/`, config);\n      dispatch({\n        type: USER_LOADED_SUCCESS,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: USER_LOADED_FAIL\n      });\n    }\n  } else {\n    dispatch({\n      type: USER_LOADED_FAIL\n    });\n  }\n};\nexport const checkAuthenticated = () => async dispatch => {\n  if (localStorage.getItem('access')) {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    };\n    const body = JSON.stringify({\n      token: localStorage.getItem('access')\n    });\n    try {\n      const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/verify/`, body, config);\n      if (res.data.code !== 'token_not_valid') {\n        dispatch({\n          type: AUTHENTICATED_SUCCESS\n        });\n      } else {\n        dispatch({\n          type: AUTHENTICATED_FAIL\n        });\n      }\n    } catch (err) {\n      dispatch({\n        type: AUTHENTICATED_FAIL\n      });\n    }\n  } else {\n    dispatch({\n      type: AUTHENTICATED_FAIL\n    });\n  }\n};\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n  try {\n    const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/create/`, body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(load_user());\n  } catch (err) {\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n};\nexport const signup = (first_name, last_name, email, password, re_password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    first_name,\n    last_name,\n    email,\n    password,\n    re_password\n  });\n  try {\n    const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/`, body, config);\n    dispatch({\n      type: SIGNUP_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: SIGNUP_FAIL\n    });\n  }\n};\nexport const verify = (uid, token) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    uid,\n    token\n  });\n  try {\n    await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/activation/`, body, config);\n    dispatch({\n      type: ACTIVATION_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: ACTIVATION_FAIL\n    });\n  }\n};\nexport const reset_password = email => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email\n  });\n  try {\n    await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password/`, body, config);\n    dispatch({\n      type: PASSWORD_RESET_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: PASSWORD_RESET_FAIL\n    });\n  }\n};\nexport const reset_password_confirm = (uid, token, new_password, re_new_password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    uid,\n    token,\n    new_password,\n    re_new_password\n  });\n  try {\n    await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password_confirm/`, body, config);\n    dispatch({\n      type: PASSWORD_RESET_CONFIRM_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: PASSWORD_RESET_CONFIRM_FAIL\n    });\n  }\n};\nexport const logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"names":["axios","LOGIN_SUCCESS","LOGIN_FAIL","USER_LOADED_SUCCESS","USER_LOADED_FAIL","AUTHENTICATED_SUCCESS","AUTHENTICATED_FAIL","PASSWORD_RESET_SUCCESS","PASSWORD_RESET_FAIL","PASSWORD_RESET_CONFIRM_SUCCESS","PASSWORD_RESET_CONFIRM_FAIL","SIGNUP_SUCCESS","SIGNUP_FAIL","ACTIVATION_SUCCESS","ACTIVATION_FAIL","LOGOUT","load_user","dispatch","localStorage","getItem","config","headers","res","get","process","env","REACT_APP_API_URL","type","payload","data","err","checkAuthenticated","body","JSON","stringify","token","post","code","login","email","password","signup","first_name","last_name","re_password","verify","uid","reset_password","reset_password_confirm","new_password","re_new_password","logout"],"sources":["/Users/mayasingh/Documents/GitHub/GatorMind-Personal/frontend/src/actions/auth.js"],"sourcesContent":["import axios from 'axios';\nimport {\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    USER_LOADED_SUCCESS,\n    USER_LOADED_FAIL,\n    AUTHENTICATED_SUCCESS,\n    AUTHENTICATED_FAIL,\n    PASSWORD_RESET_SUCCESS,\n    PASSWORD_RESET_FAIL,\n    PASSWORD_RESET_CONFIRM_SUCCESS,\n    PASSWORD_RESET_CONFIRM_FAIL,\n    SIGNUP_SUCCESS,\n    SIGNUP_FAIL,\n    ACTIVATION_SUCCESS,\n    ACTIVATION_FAIL,\n    LOGOUT\n} from './types';\n\nexport const load_user = () => async dispatch => {\n    if (localStorage.getItem('access')) {\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `JWT ${localStorage.getItem('access')}`,\n                'Accept': 'application/json'\n            }\n        };\n\n        try {\n            const res = await axios.get(`${process.env.REACT_APP_API_URL}/auth/users/me/`, config);\n\n            dispatch({\n                type: USER_LOADED_SUCCESS,\n                payload: res.data\n            });\n        }\n        catch (err) {\n            dispatch({\n                type: USER_LOADED_FAIL\n            });\n        }\n    }\n    else {\n        dispatch({\n            type: USER_LOADED_FAIL\n        });\n    }\n};\n\nexport const checkAuthenticated = () => async dispatch => {\n    if (localStorage.getItem('access')) {\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            }\n        };\n\n        const body = JSON.stringify({ token: localStorage.getItem('access') });\n\n        try {\n            const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/verify/`, body, config)\n\n            if (res.data.code !== 'token_not_valid') {\n                dispatch({\n                    type: AUTHENTICATED_SUCCESS\n                });\n            }\n            else {\n                dispatch({\n                    type: AUTHENTICATED_FAIL\n                });\n            }\n        }\n        catch (err) {\n            dispatch({\n                type: AUTHENTICATED_FAIL\n            });\n        }\n\n    }\n    else {\n        dispatch({\n            type: AUTHENTICATED_FAIL\n        });\n    }\n};\n\nexport const login = (email, password) => async dispatch => {\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    };\n\n    const body = JSON.stringify({ email, password });\n\n    try {\n        const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/create/`, body, config);\n\n        dispatch({\n            type: LOGIN_SUCCESS,\n            payload: res.data\n        });\n\n        dispatch(load_user());\n    }\n    catch (err) {\n        dispatch({\n            type: LOGIN_FAIL\n        })\n    }\n};\n\nexport const signup = (first_name, last_name, email, password, re_password) => async dispatch => {\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    };\n\n    const body = JSON.stringify({ first_name, last_name, email, password, re_password });\n\n    try {\n        const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/`, body, config);\n\n        dispatch({\n            type: SIGNUP_SUCCESS,\n            payload: res.data\n        });\n    }\n    catch (err) {\n        dispatch({\n            type: SIGNUP_FAIL\n        })\n    }\n};\n\nexport const verify = (uid, token) => async dispatch => {\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    };\n\n    const body = JSON.stringify({ uid, token });\n\n    try {\n        await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/activation/`, body, config);\n\n        dispatch({\n            type: ACTIVATION_SUCCESS,\n        });\n    }\n    catch (err) {\n        dispatch({\n            type: ACTIVATION_FAIL\n        })\n    }\n};\n\nexport const reset_password = (email) => async dispatch => {\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    };\n\n    const body = JSON.stringify({ email });\n\n    try {\n        await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password/`, body, config);\n\n        dispatch({\n            type: PASSWORD_RESET_SUCCESS\n        });\n    }\n    catch (err) {\n        dispatch({\n            type: PASSWORD_RESET_FAIL\n        });\n    }\n};\n\nexport const reset_password_confirm = (uid, token, new_password, re_new_password) => async dispatch => {\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    };\n\n    const body = JSON.stringify({ uid, token, new_password, re_new_password });\n\n    try {\n        await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password_confirm/`, body, config);\n\n        dispatch({\n            type: PASSWORD_RESET_CONFIRM_SUCCESS\n        });\n    }\n    catch (err) {\n        dispatch({\n            type: PASSWORD_RESET_CONFIRM_FAIL\n        });\n    }\n};\n\nexport const logout = () => dispatch => {\n    dispatch({\n        type: LOGOUT\n    });\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
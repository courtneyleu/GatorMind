{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { getAnalytics } from \"firebase/analytics\";\nimport { getAuth, signInWithEmailAndPassword, createUserWithEmailAndPassword, sendPasswordResetEmail, signOut } from \"firebase/auth\";\nimport { getFirestore, collection, addDoc } from \"firebase/firestore\";\nconst firebaseConfig = {\n  apiKey: \"secret\",\n  authDomain: \"secret\",\n  projectId: \"secret\",\n  storageBucket: \"secret\",\n  messagingSenderId: \"secret\",\n  appId: \"secret\",\n  measurementId: \"secret\"\n};\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth(app);\nconst db = getFirestore(app);\nconst analytics = getAnalytics(app);\nconst logInWithEmailAndPassword = async (email, password) => {\n  try {\n    await signInWithEmailAndPassword(auth, email, password);\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\nconst registerWithEmailAndPassword = async (firstName, lastName, username, email, password) => {\n  try {\n    const res = await createUserWithEmailAndPassword(auth, email, password);\n    const user = res.user;\n    await addDoc(collection(db, \"users\"), {\n      uid: user.uid,\n      firstName,\n      lastName,\n      username,\n      authProvider: \"local\",\n      email\n    });\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\nconst sendPasswordReset = async email => {\n  try {\n    await sendPasswordResetEmail(auth, email);\n    alert(\"Password reset link sent!\");\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\nconst logout = () => {\n  signOut(auth);\n};\nexport { auth, db, logInWithEmailAndPassword, registerWithEmailAndPassword, sendPasswordReset, logout };","map":{"version":3,"names":["initializeApp","getAnalytics","getAuth","signInWithEmailAndPassword","createUserWithEmailAndPassword","sendPasswordResetEmail","signOut","getFirestore","collection","addDoc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","auth","db","analytics","logInWithEmailAndPassword","email","password","err","console","error","alert","message","registerWithEmailAndPassword","firstName","lastName","username","res","user","uid","authProvider","sendPasswordReset","logout"],"sources":["/Users/mayasingh/Documents/GitHub/GatorMind-Personal/frontend/src/services/firebase.js"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\nimport { getAnalytics } from \"firebase/analytics\";\nimport {\n  getAuth,\n  signInWithEmailAndPassword,\n  createUserWithEmailAndPassword,\n  sendPasswordResetEmail,\n  signOut,\n} from \"firebase/auth\";\n\nimport {\n  getFirestore,\n  collection,\n  addDoc,\n} from \"firebase/firestore\";\n\nconst firebaseConfig = {\n  apiKey: \"secret\",\n  authDomain: \"secret\",\n  projectId: \"secret\",\n  storageBucket: \"secret\",\n  messagingSenderId: \"secret\",\n  appId: \"secret\",\n  measurementId: \"secret\"\n}\n\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth(app);\nconst db = getFirestore(app);\nconst analytics = getAnalytics(app);\n\n\nconst logInWithEmailAndPassword = async (email, password) => {\n  try {\n    await signInWithEmailAndPassword(auth, email, password);\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\n\nconst registerWithEmailAndPassword = async (firstName, lastName, username, email, password) => {\n  try {\n    const res = await createUserWithEmailAndPassword(auth, email, password);\n    const user = res.user;\n    await addDoc(collection(db, \"users\"), {\n      uid: user.uid,\n      firstName,\n      lastName,\n      username,\n      authProvider: \"local\",\n      email,\n    });\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\n\nconst sendPasswordReset = async (email) => {\n  try {\n    await sendPasswordResetEmail(auth, email);\n    alert(\"Password reset link sent!\");\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\n\nconst logout = () => {\n  signOut(auth);\n};\n\nexport {\n  auth,\n  db,\n  logInWithEmailAndPassword,\n  registerWithEmailAndPassword,\n  sendPasswordReset,\n  logout,\n};"],"mappings":"AAAA,SAASA,aAAa,QAAQ,cAAc;AAC5C,SAASC,YAAY,QAAQ,oBAAoB;AACjD,SACEC,OAAO,EACPC,0BAA0B,EAC1BC,8BAA8B,EAC9BC,sBAAsB,EACtBC,OAAO,QACF,eAAe;AAEtB,SACEC,YAAY,EACZC,UAAU,EACVC,MAAM,QACD,oBAAoB;AAE3B,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,QAAQ;EAChBC,UAAU,EAAE,QAAQ;EACpBC,SAAS,EAAE,QAAQ;EACnBC,aAAa,EAAE,QAAQ;EACvBC,iBAAiB,EAAE,QAAQ;EAC3BC,KAAK,EAAE,QAAQ;EACfC,aAAa,EAAE;AACjB,CAAC;AAED,MAAMC,GAAG,GAAGlB,aAAa,CAACU,cAAc,CAAC;AACzC,MAAMS,IAAI,GAAGjB,OAAO,CAACgB,GAAG,CAAC;AACzB,MAAME,EAAE,GAAGb,YAAY,CAACW,GAAG,CAAC;AAC5B,MAAMG,SAAS,GAAGpB,YAAY,CAACiB,GAAG,CAAC;AAGnC,MAAMI,yBAAyB,GAAG,OAAOC,KAAK,EAAEC,QAAQ,KAAK;EAC3D,IAAI;IACF,MAAMrB,0BAA0B,CAACgB,IAAI,EAAEI,KAAK,EAAEC,QAAQ,CAAC;EACzD,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;IAClBG,KAAK,CAACH,GAAG,CAACI,OAAO,CAAC;EACpB;AACF,CAAC;AAED,MAAMC,4BAA4B,GAAG,OAAOC,SAAS,EAAEC,QAAQ,EAAEC,QAAQ,EAAEV,KAAK,EAAEC,QAAQ,KAAK;EAC7F,IAAI;IACF,MAAMU,GAAG,GAAG,MAAM9B,8BAA8B,CAACe,IAAI,EAAEI,KAAK,EAAEC,QAAQ,CAAC;IACvE,MAAMW,IAAI,GAAGD,GAAG,CAACC,IAAI;IACrB,MAAM1B,MAAM,CAACD,UAAU,CAACY,EAAE,EAAE,OAAO,CAAC,EAAE;MACpCgB,GAAG,EAAED,IAAI,CAACC,GAAG;MACbL,SAAS;MACTC,QAAQ;MACRC,QAAQ;MACRI,YAAY,EAAE,OAAO;MACrBd;IACF,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOE,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;IAClBG,KAAK,CAACH,GAAG,CAACI,OAAO,CAAC;EACpB;AACF,CAAC;AAED,MAAMS,iBAAiB,GAAG,MAAOf,KAAK,IAAK;EACzC,IAAI;IACF,MAAMlB,sBAAsB,CAACc,IAAI,EAAEI,KAAK,CAAC;IACzCK,KAAK,CAAC,2BAA2B,CAAC;EACpC,CAAC,CAAC,OAAOH,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;IAClBG,KAAK,CAACH,GAAG,CAACI,OAAO,CAAC;EACpB;AACF,CAAC;AAED,MAAMU,MAAM,GAAG,MAAM;EACnBjC,OAAO,CAACa,IAAI,CAAC;AACf,CAAC;AAED,SACEA,IAAI,EACJC,EAAE,EACFE,yBAAyB,EACzBQ,4BAA4B,EAC5BQ,iBAAiB,EACjBC,MAAM"},"metadata":{},"sourceType":"module"}